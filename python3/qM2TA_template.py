"""
This script runs  quadratic multiomic metabolic transformation algorithm (qM2TA) to simulate metabolic transition between two conditions (source_condition -> target_condition) using gene expression and metabolomics data.
It also identifies potential targets to revert the transformation.

Usage:
- Modify the "User Input" section with appropriate input files, output settings, and options before execution.

"""

import cobra
import math
import numpy as np
import sys
import os
import copy
import scipy
import json
from cobra import Reaction, Metabolite

from cobrafunctions.write_spreadsheet import write_spreadsheet
from cobrafunctions.read_spreadsheets import read_spreadsheets, convert_first_sheet_to_pandas
from cobrafunctions import qMTA, metabolomics_functions
from cobrafunctions.cobra_functions import round_up, round_down, remove_innactive, clean_str, list_to_str
from cobrafunctions.moma import simulate_reaction_ko_moma
from cobrafunctions.metabolomics_functions import (
    add_sink_reactions_with_multiple_compartments, read_metabolomics_data, 
    statistical_difference_metabolomics, modify_model_for_seahorse_recon3d
)

#### User Input Section ####
"""
Modify this section to tailor the script to your analysis needs.
"""

# Path to JSON file mapping reactions to pathways
reaction_pathway_dict_fname = "/path/to/reaction_pathway_dict.json" #File should contain a dictionary with the structure {"reaction1_id":["pathway1"],reaction2_id":["pathway2"]}

# Path to the JSON file containing the flux data generated by the gim3e_and_sampling.py script
sampling_fname = "/path/to/sampling_data.json"

# Data dictionary defining the transformation being simulated
# Each entry corresponds to a transformation from a source condition to a target condition
# Ensure the target/source condition names match those in the sampling and metabolomics files

data_dict = {
    "treatement_vs_control": {
        "source_model": cobra.io.read_sbml_model("/path/to/source_model.sbml"),
        "target_model": cobra.io.read_sbml_model("/path/to/target_model.sbml"),
        "target_condition": "treatment",
        "source_condition": "control",
        "differential_gene_file": "/path/to/differential_gene_data.xlsx",
        "log2_str": "log2FoldChange_treatement_vs_control",
        "padj_str": "padj_treatement_vs_control"
    }
}

# Biomass reaction ID in the model
biomass_reaction = "BIOMASS_reaction"


### Optimization Parameters ###
# Weights for different optimization components

gene_weight = 0.5  # Weight assigned to gene expression changes
reaction_weight = 0.5  # Weight for unchanged reactions
met_weight = 9  # Weight for extracelular metabolomics
kpc_weight = 9  # Weight for flux measures

# Minimum flux threshold to consider a reaction as active
min_flux4weight = 1e-6

### Gene Expression Parameters ###
"""
Additional settings related to gene expression analysis:
- log2_factor: Multiplier for Log2FC values (use -1 to flip fold change direction)
- p_th: Adjusted p-value threshold for considering genes significantly up/downregulated
- log2fc_th: Minimum absolute Log2FC threshold for significance
- gene_str: Column name containing gene identifiers
- p_weight_formula: Formula for weighting genes based on statistical significance
"""

gene_parameters = {
    "log2_factor": 1,
    "p_th": 0.25,
    "log2fc_th": 0.0,
    "gene_str": "NCBI.gene..formerly.Entrezgene..ID",
    "p_weight_formula": "-1*math.log(p_value,10) + math.log(0.25001,10)"
}

### Extracellular Metabolomics Parameters ###
"""
This section defines how metabolomics data related to metabolite exchange with the medium (uptake/secretion) is processed.

The input file should include multiple replicates with condition labels, following this format:
Replicate,Condition,Gln,Glu
1,source_condition,-0.04358,0.00785
2,source_condition,-0.05258,0.00814
...
1,target_condition,-0.06083,0.00993
2,target_condition,-0.065,0.001
...
"""

metabolomics_kpc_file = "/path/to/extracellular_metabolomics.xlsx"

# Formula for weighting extracellular metabolomics data (Chi-square minimization used by default)
p_weight_formula_kpc = "1/(pow(max(sd1, 0.00001),2))"
normalize_p_weight_kpc = False # Set to False if using Chi-square minimization
normalize_by_scale_kpc = False # Set to False if using Chi-square minimization
p_adj_th_kpc = 1  # Set to 1 if using Chi-square minimization

# Mapping of metabolite names to reaction IDs
metabolite_ex_dict={'ala': 'EX_ala__L_e',
 'alpha-aaa': 'EX_L2aadp_e',
 'arg': 'EX_arg__L_e',
 'asn': 'EX_asn__L_e',
 'asp': 'EX_asp__L_e',
 'c0': 'EX_crn_e',
 'carn': 'EX_carn_e',
 'carnosine': 'EX_carn_e',
 'cit': 'EX_citr__L_e',
 'creatinine': 'EX_crtn_e',
 'gln': 'EX_gln__L_e',
 'glu': 'EX_glu__L_e',
 'gly': 'EX_gly_e',
 'his': 'EX_his__L_e',
 'histamine': 'EX_hista_e',
 'ile': 'EX_ile__L_e',
 'kynurenine': 'EX_Lkynr_e',
 'leu': 'EX_leu__L_e',
 'lys': 'EX_lys__L_e',
 'met': 'EX_met__L_e',
 'orn': 'EX_orn_e',
 'phe': 'EX_phe__L_e',
 'pro': 'EX_pro__L_e',
 'putrescine': 'EX_ptrc_e',
 'ser': 'EX_ser__L_e',
 'serotonin': 'EX_srtn_e',
 'spermidine': 'EX_spmd_e',
 'spermine': 'EX_sprm_e',
 'srtn': 'EX_srtn_e',
 't4-oh-pro': 'EX_4hpro_LT_e',
 'taurine': 'EX_taur_e',
 'thr': 'EX_thr__L_e',
 'trp': 'EX_trp__L_e',
 'tyr': 'EX_tyr__L_e',
 'val': 'EX_val__L_e',
 "glc": "EX_glc__D_e",
 "glucose":"EX_glc__D_e",
 "lac":"EX_lac__L_e",
 "lactate":"EX_lac__L_e",
  "pyr":"EX_pyr_e",
 "pyruvate":"EX_pyr_e",
 "serotonine":"EX_srtn_e",
 "dopa":"EX_34dhphe_e","dopamine":"EX_dopa_e",
 "per":"RGROUP_h_transport",
 "ocr":"EX_o2_e",
 "basal respiration":"RGROUP_CYOOm3i_CYOOm2i",
 "atp production":"RGROUP_CYOOm_atpsyn"
 # Add other relevant metabolites...
 }    


kpc_parameters = {
    "kpc_name_dict": metabolite_ex_dict,
    "p_adj_th_kpc": p_adj_th_kpc,
    "p_weight_formula_kpc": p_weight_formula_kpc,
    "normalize_by_scale_kpc": normalize_by_scale_kpc,
    "normalize_p_weight": normalize_p_weight_kpc
}

### Intracellular Metabolomics Parameters ###
metabolomics_file = None  # Set path if intracellular metabolomics data is available

p_weight_formula_met_pellet = "1/(pow(max(sd1, 0.00001),2))"  # Chi-square minimization
p_adj_th_met_pellet = 1  # Leave at 1 if using Chi-square minimization
normalize_by_scale_met = False
normalize_p_weight_met = False

# Mapping of intracellular metabolite names to model metabolite IDs
metabolite_name_compartment_dict={u'ala': {'compartment': ['c', 'x', 'm'], 'met_id': u'ala__L'},
 'alpha-aaa': {'compartment': ['c', 'm'], 'met_id': 'L2aadp'},
 'arg': {'compartment': ['c', 'm'], 'met_id': u'arg__L'},
 'asn': {'compartment': ['c', 'm'], 'met_id': u'asn__L'},
 'asp': {'compartment': ['c', 'm'], 'met_id': u'asp__L'},
 'c0': {'compartment': ['c', 'x', 'm'], 'met_id': 'crn'},
 'c10': {'compartment': ['c', 'x'], 'met_id': 'c10dc'},
 'c12': {'compartment': ['c', 'x'], 'met_id': 'c12dc'},
 'c14': {'compartment': ['c', 'm'], 'met_id': 'ttdcrn'},
 'c16': {'compartment': ['c', 'x', 'm'], 'met_id': 'pmtcrn'},
 'c16:1': {'compartment': ['c', 'm'], 'met_id': 'hdcecrn'},
 'c18': {'compartment': ['c', 'm'], 'met_id': 'stcrn'},
 'c18:1': {'compartment': ['c', 'm'], 'met_id': 'odecrn'},
 'c2': {'compartment': ['c', 'x', 'm'], 'met_id': 'acrn'},
 'c3': {'compartment': ['c', 'x', 'm'], 'met_id': 'pcrn'},
 'c4': {'compartment': ['c', 'x', 'm'], 'met_id': 'c4crn'},
 'c6': {'compartment': ['c', 'x'], 'met_id': 'c6crn'},
 'c8': {'compartment': ['c', 'x', 'm'], 'met_id': 'c8crn'},
 'carn': {'compartment': ['c'], 'met_id': u'carn'},
 'carnosine': {'compartment': ['c'], 'met_id': 'carn'},
 'cit': {'compartment': ['c', 'm'], 'met_id': u'citr__L'},
 'creatinine': {'compartment': ['c', 'm'], 'met_id': 'creat'},
 'dopa': {'compartment': ['c'], 'met_id': '34dhphe'},
 'dopamine': {'compartment': ['c'], 'met_id': 'dopa'},
 'gln': {'compartment': ['c', 'm'], 'met_id': u'gln__L'},
 'glu': {'compartment': ['c', 'm'], 'met_id': u'glu__L'},
 'gly': {'compartment': ['c', 'x', 'm'], 'met_id': u'gly'},
 'his': {'compartment': ['c', 'm'], 'met_id': u'his__L'},
 'histamine': {'compartment': ['c'], 'met_id': 'hista'},
 'ile': {'compartment': ['c', 'm'], 'met_id': u'ile__L'},
 'kynurenine': {'compartment': ['c'], 'met_id': 'Lkynr'},
 'leu': {'compartment': ['c', 'm'], 'met_id': u'leu__L'},
 'lys': {'compartment': ['c', 'x', 'm'], 'met_id': u'lys__L'},
 'met': {'compartment': ['c', 'm'], 'met_id': u'met__L'},
 'orn': {'compartment': ['c', 'm'], 'met_id': u'orn'},
 'phe': {'compartment': ['c', 'm'], 'met_id': u'phe__L'},
 'pro': {'compartment': ['c', 'm'], 'met_id': u'pro__L'},
 'putrescine': {'compartment': ['c', 'm'], 'met_id': 'ptrc'},
 'ser': {'compartment': ['c', 'x', 'm'], 'met_id': u'ser__L'},
 'serotonin': {'compartment': ['c'], 'met_id': 'srtn'},
 'spermidine': {'compartment': ['c'], 'met_id': u'spmd'},
 'spermine': {'compartment': ['c'], 'met_id': u'sprm'},
 'srtn': {'compartment': ['c'], 'met_id': u'srtn'},
 't4-oh-pro': {'compartment': ['c', 'm'], 'met_id': '4hpro_LT'},
 'taurine': {'compartment': ['c', 'x'], 'met_id': 'taur'},
 'thr': {'compartment': ['c', 'm'], 'met_id': u'thr__L'},
 'trp': {'compartment': ['c'], 'met_id': u'trp__L'},
 'tyr': {'compartment': ['c', 'm'], 'met_id': u'tyr__L'},
 'val': {'compartment': ['c', 'm'], 'met_id': u'val__L'}
 # Add other relevant mappings...
}

met_parameters = {
    "metabolite_name_compartment_dict": metabolite_name_compartment_dict,
    "p_adj_th_met": p_adj_th_met_pellet,
    "p_weight_formula_met": p_weight_formula_met_pellet,
    "normalize_by_scale_met": normalize_by_scale_met,
    "normalize_p_weight": normalize_p_weight_met
}

### Target Analysis Parameters ###
search_for_targets = True
restrict_factor_for_targets = 4  # Limits model flux increases when searching for targets to this fold change

gene_ko_parameters = {
    "gpr": True,  # Consider Gene-Protein-Reaction rules
    "ko_factor": 0.5,  # Percentatge that target reactions should be inhibed
    "MOMA Quadratic": True  # Use quadratic minimization for MOMA simulations
}

drug_information_file = None # Optional JSON file providing drug-target information. If Its not provided only Genes will be evaluated as targets



normalize_by_ref_flux_score=False #Wether Targets should be scored based on absolute or relative flux changes. Leave to False to prioritize reactions with more flux
min_flux=min_flux_score=0 #Min Flux to consider when scoring. Can be left at 0 if the above is false

# Significance thresholds for extracellular and intracellular metabolite variations
p_adj_th_kpc_targets = 0.25
p_weight_formula_kpc_targets = "-1*math.log(p_value,10) + math.log(0.25001,10)"
normalize_p_weight_kpc_targets = True

p_adj_th_pellet_targets = 0.25
p_weight_formula_met_pellet_targets = "-1*math.log(p_value,10) + math.log(0.25001,10)"
normalize_p_weight_pellet_targets = True

max_reactionxgene_score = 10  # Ignore genes associated with excessive reactions

### Define Output Directory ###

output_folder="/path/to/output_directory"
output_prefix=""


if not os.path.exists(output_folder):
    # If it doesn't exist, create it
    os.makedirs(output_folder)


os.chdir(output_folder)


#### End User Input Section ####

with open(reaction_pathway_dict_fname,"r") as f:
    reaction_pathway_dict=json.load(f)


with open(sampling_fname,"r") as f:
    sampling_dict=json.load(f)




#### qM2TA: Metabolic Transition####
output_sheet={}
condition_mta_vres={}
for key in sorted(data_dict): 
    base_model=source_model=data_dict[key]["source_model"]
    target_model=data_dict[key]["target_model"]
    gene_file=data_dict[key]["differential_gene_file"]
    source_condition=data_dict[key]["source_condition"]
    target_condition=data_dict[key]["target_condition"]
    met_parameters["target_condition"]=target_condition
    met_parameters["source_condition"]=source_condition
    kpc_parameters["target_condition"]=target_condition
    kpc_parameters["source_condition"]=source_condition
    gene_parameters_mod=copy.deepcopy(gene_parameters)
    gene_parameters_mod.update(data_dict[key]) #Get pvalue and log2FC names from condition
    vref_dict={x:sampling_dict[source_condition][x]["mean"] for x in sampling_dict[source_condition]}
    #Add fake growth gene to biomass
    base_model.reactions.get_by_id(biomass_reaction).gene_reaction_rule="GROWTH"
    target_model.reactions.get_by_id(biomass_reaction).gene_reaction_rule="GROWTH"
    output_sheet_1, vres_dict, reaction_dict_dict, variation_dict_dict,up_genes, down_genes, log2fold_change_dict,   p_value_dict ,  gene_weight_dict,signficant_met_dict,signficant_kpc=qMTA.run_qMTA(target_model,base_model,gene_fname=gene_file,vref_dict=vref_dict,gene_parameters=gene_parameters_mod,gene_weight=gene_weight,unchanged_reaction_weight=reaction_weight,met_weight=met_weight,reaction_pathway_dict=reaction_pathway_dict,key=key,metabolomics_file=metabolomics_file,met_parameters=met_parameters,output_signficant_genes_only=False,output_omit_reactions_with_more_than_max_genes=False,normalize_by_scale_genes=True,min_flux4weight=min_flux4weight,coef_precision=7,normalize_by_scale_unchanged_reactions=True,kpc_file=metabolomics_kpc_file,kpc_weight=kpc_weight,kpc_parameters=kpc_parameters)
    output_sheet.update(output_sheet_1)
    condition_mta_vres[key]=vres_dict


#Merge sheets 
col_number_to_not_duplicate=[0]
sheets_to_merge=[key+"_a" for key in data_dict]
for n_1,sheet in enumerate(sheets_to_merge):
    if n_1==0:
       new_sheet=copy.deepcopy(output_sheet[sheet])
       shared_header=[x for i, x in enumerate(new_sheet[0]) if i in col_number_to_not_duplicate]
       header_condition=[x+"_"+sheet.replace("_a","") for i, x in enumerate(new_sheet[0]) if i not in col_number_to_not_duplicate]
       new_sheet[0]= shared_header+header_condition  #[x+"_"+sheet for x in new_sheet[0]] 
    else:
        for n,rows in enumerate(output_sheet[sheet]):
            rows=[x for i, x in enumerate(rows) if i not in col_number_to_not_duplicate]
            if n==0:
                rows=[x+"_"+sheet.replace("_a","") for x in rows]
            new_sheet[n]+=rows

output_sheet["merged_pathways"]=new_sheet


#Merge sheets "in_vivo_t1__all_reactions","in_vivo_t2__all_reactions","invivo_t3__all_reactions"
col_number_to_not_duplicate=[0,1,2,3,4]
sheets_to_merge=[key+"_all_reactions" for key in data_dict]
for n_1,sheet in enumerate(sheets_to_merge):
    if n_1==0:
       new_sheet=copy.deepcopy(output_sheet[sheet])
       shared_header=[x for i, x in enumerate(new_sheet[0]) if i in col_number_to_not_duplicate]
       header_condition=[x+"_"+sheet.replace("_all_reactions","") for i, x in enumerate(new_sheet[0]) if i not in col_number_to_not_duplicate]
       new_sheet[0]= shared_header+header_condition  #[x+"_"+sheet for x in new_sheet[0]] 
    else:
        for n,rows in enumerate(output_sheet[sheet]):
            rows=[x for i, x in enumerate(rows) if i not in col_number_to_not_duplicate]
            if n==0:
                rows=[x+"_"+sheet.replace("_all_reactions","") for x in rows]
            new_sheet[n]+=rows

output_sheet["merged_reactions"]=new_sheet

key_name=".".join(list(data_dict.keys()))

write_spreadsheet(output_prefix+key_name+"_qMTA.xlsx",output_sheet)


pd_all_pathways=convert_first_sheet_to_pandas({"a":output_sheet["merged_pathways"]})
pd_all_reactions=convert_first_sheet_to_pandas({"a":output_sheet["merged_reactions"]})
pd_all_pathways.to_csv(output_prefix+key_name+"_qMTA_pathways.csv",index=False)
pd_all_reactions.to_csv(output_prefix+key_name+"_qMTA_reactions.csv",index=False)


if not search_for_targets:
    quit()

#### qM2TA Targets####

#Get targets
if not drug_information_file in ("",None,False):
  with open(drug_information_file,"r") as f:
   temp_dict=json.load(f)
   targets_drug_dict=temp_dict["targets_drug_dict"]
   #drug_targets_metabolic_all=temp_dict["drug_targets_metabolic_all"]
else:
  targets_drug_dict={}
  

#Add gene KD/putative_inhibitor
for gene in base_model.genes:
    gene_id=gene.id
    if len(gene.reactions)>0:
       gene_id_str=str([gene_id]) 
       if gene_id_str not in targets_drug_dict:
          gene_target_str=gene_id+"(KD or putative inhibitor)" 
          targets_drug_dict[gene_id_str]= str([gene_target_str])


gene_ko_parameters["gene_ko_list"]=list(targets_drug_dict.keys())

#Restrict models not to increase more than X times the flux of Vref, Vres when looking for targets
processed_model_dict_4targets={}
for key in data_dict:
  target_model_mod=data_dict[key]["target_model"].copy()
  source_condition=data_dict[key]["source_condition"]
  target_condition=data_dict[key]["target_condition"]
  met_parameters["target_condition"]=target_condition
  met_parameters["source_condition"]=source_condition
  kpc_parameters["target_condition"]=target_condition
  kpc_parameters["source_condition"]=source_condition
  gene_parameters_mod=copy.deepcopy(gene_parameters)
  gene_parameters_mod.update(data_dict[key]) #Get pvalue and log2FC names from condition
  vref_dict={x:sampling_dict[source_condition][x]["mean"] for x in sampling_dict[source_condition]}
  if metabolomics_file not in ("",None): #This might not be needed but just in case
     stat_dict_pellets=read_metabolomics_data(metabolomics_file)  
     met_sink_dict, rejected_list=metabolomics_functions.add_sink_reactions_with_multiple_compartments(target_model_mod,stat_dict_pellets,metabolite_name_compartment_dict=met_parameters["metabolite_name_compartment_dict"],lb=None,ub=None,condition="Control",precision=7,factor=1)
  for reaction in target_model_mod.reactions:
    vres_flux=condition_mta_vres[key][reaction.id]*restrict_factor_for_targets
    vref_flux=vref_dict[reaction.id]*restrict_factor_for_targets
    original_ub=ub=reaction.upper_bound
    original_lb=lb=reaction.lower_bound
    #Forward only reaction
    if reaction.lower_bound>=0 and reaction.upper_bound>0:
       ub=max(0,vres_flux,vref_flux)
    #Reverse only reaction 
    if reaction.upper_bound<=0 and reaction.lower_bound<0:
       lb=min(0,vres_flux,vref_flux)
    #reversible reaction
    if reaction.upper_bound>0 and reaction.lower_bound<0:
       ub=max(0,vres_flux,vref_flux,-vres_flux,-vref_flux)
       lb=min(0,vres_flux,vref_flux,-vres_flux,-vref_flux)
    #print reaction.bounds, (lb,ub)
    new_lb=max(round_down(lb,5),original_lb)
    new_ub=min(round_up(ub,5), original_ub)
    if condition_mta_vres[key][reaction.id]>new_ub or  condition_mta_vres[key][reaction.id]<new_lb:
       print(reaction.id, reaction.bounds, (new_lb,new_ub), condition_mta_vres[key][reaction.id])
    reaction.bounds=(new_lb,new_ub)
  remove_innactive(target_model_mod,remove=True,fva=None,reaction_id_remove=None)  
  processed_model_dict_4targets[key]=target_model_mod   



#output_sheet={}
min_flux=min_flux_score
score_dict_dict_dict={}
sheet_dict={}

#ko_dict_qmta={}
#Same for moma
#ko_dict_moma={}

#gene_ko_parameters["gene_ko_list"]=["['341947']"]
for key in data_dict: 
    base_model=source_model=data_dict[key]["source_model"].copy()
    #target_model=base_model=data_dict[key]["target_model"]
    gene_file=data_dict[key]["differential_gene_file"]
    source_condition=data_dict[key]["source_condition"]
    target_condition=data_dict[key]["target_condition"]
    met_parameters["target_condition"]=target_condition
    met_parameters["source_condition"]=source_condition
    kpc_parameters["target_condition"]=target_condition
    kpc_parameters["source_condition"]=source_condition
    gene_parameters_mod=copy.deepcopy(gene_parameters)
    gene_parameters_mod.update(data_dict[key]) #Get pvalue and log2FC names from condition
    vref_dict={x:sampling_dict[source_condition][x]["mean"] for x in sampling_dict[source_condition]}
    reduced_target_model=processed_model_dict_4targets[key].copy() #Target model
    #Add fake growth gene to biomass #Should already be added but let's make sure
    base_model.reactions.get_by_id(biomass_reaction).gene_reaction_rule="GROWTH"
    reduced_target_model.reactions.get_by_id(biomass_reaction).gene_reaction_rule="GROWTH"
    ko_dict_drugs,up_genes, down_genes, log2fold_change_dict,   p_value_dict ,  gene_weight_dict=qMTA.run_qMTA_targets(reduced_target_model,base_model,gene_fname=gene_file,vref_dict=vref_dict,gene_parameters=gene_parameters_mod,gene_weight=gene_weight,unchanged_reaction_weight=reaction_weight,met_weight=met_weight,reaction_pathway_dict=reaction_pathway_dict,key=key,metabolomics_file=metabolomics_file,met_parameters=met_parameters,output_signficant_genes_only=False,output_omit_reactions_with_more_than_max_genes=False,normalize_by_scale_genes=True,min_flux4weight=min_flux4weight,coef_precision=7,normalize_by_scale_unchanged_reactions=True,kpc_file=metabolomics_kpc_file,kpc_weight=kpc_weight,kpc_parameters=kpc_parameters,gene_ko_parameters=gene_ko_parameters)
    #ko_dict_qmta[key]=ko_dict_drugs
    
    #Moma
    reactions_to_ko_drug_dict={x:ko_dict_drugs[x]["reactions_to_ko"] for x in ko_dict_drugs}
    reduced_target_model=processed_model_dict_4targets[key] #Target model
    base_vres=condition_mta_vres[key]
    results_dict_moma_drug=simulate_reaction_ko_moma(reduced_target_model,reference_fluxes=base_vres,reactions_to_ko_dict=reactions_to_ko_drug_dict,ko_factor=gene_ko_parameters["ko_factor"],quadratic=gene_ko_parameters["MOMA Quadratic"])
    #ko_dict_moma[key]=results_dict_moma_drug
    
    
    #Score
    base_model=source_model=data_dict[key]["source_model"]
    target_model_mod=data_dict[key]["target_model"].copy()
    source_condition=data_dict[key]["source_condition"]
    target_condition=data_dict[key]["target_condition"]
    met_parameters["target_condition"]=target_condition
    met_parameters["source_condition"]=source_condition
    kpc_parameters["target_condition"]=target_condition
    kpc_parameters["source_condition"]=source_condition
    gene_parameters_mod=copy.deepcopy(gene_parameters)
    gene_parameters_mod.update(data_dict[key]) #Get pvalue and log2FC names from condition
    vref_dict={x:sampling_dict[source_condition][x]["mean"] for x in sampling_dict[source_condition]}
    #Basically used to get the up genes, down genes and metabolomics, a bit redundant
    output_sheet_1, vres_dict, reaction_dict_dict, variation_dict_dict,up_genes, down_genes, log2fold_change_dict,   p_value_dict ,  gene_weight_dict,signficant_met_dict,signficant_kpc=qMTA.run_qMTA(target_model,base_model,gene_fname=gene_file,vref_dict=vref_dict,gene_parameters=gene_parameters_mod,gene_weight=gene_weight,unchanged_reaction_weight=reaction_weight,met_weight=met_weight,reaction_pathway_dict=reaction_pathway_dict,key=key,metabolomics_file=metabolomics_file,met_parameters=met_parameters,output_signficant_genes_only=False,output_omit_reactions_with_more_than_max_genes=False,normalize_by_scale_genes=True,min_flux4weight=min_flux4weight,coef_precision=7,normalize_by_scale_unchanged_reactions=True,kpc_file=metabolomics_kpc_file,kpc_weight=kpc_weight,kpc_parameters=kpc_parameters)
    signficant_met_dict_kpc={}
    signficant_met_dict_pellet={}
    if metabolomics_kpc_file not in ("",None,False):
       stat_dict_kpc=read_metabolomics_data(metabolomics_kpc_file) 
       signficant_met_dict_kpc=statistical_difference_metabolomics(stat_dict_kpc,cond1=kpc_parameters["target_condition"],cond2=kpc_parameters["source_condition"],convert_to_log=False, p_adj_th=p_adj_th_kpc_targets,met_list=metabolite_ex_dict,p_weight_formula=p_weight_formula_kpc_targets,met_sink_dict=metabolite_ex_dict,log2_factor_met=1,normalize_p_weight=normalize_p_weight_kpc_targets)
    if metabolomics_file not in ("",None,False):
       stat_dict_pellet=read_metabolomics_data(metabolomics_file)
       met_sink_dict, rejected_list=add_sink_reactions_with_multiple_compartments(target_model_mod,stat_dict_pellet,metabolite_name_compartment_dict=met_parameters["metabolite_name_compartment_dict"],lb=None,ub=None,condition="Control",precision=7,factor=1) 
       signficant_met_dict_pellet=statistical_difference_metabolomics(stat_dict_pellet,cond1=met_parameters["target_condition"],cond2=met_parameters["source_condition"],convert_to_log=False, p_adj_th=p_adj_th_pellet_targets,met_list=met_parameters["metabolite_name_compartment_dict"],p_weight_formula=p_weight_formula_met_pellet_targets  ,met_sink_dict=met_sink_dict,log2_factor_met=1,normalize_p_weight=normalize_p_weight_pellet_targets)
    score_dict={}
    vres_dict=base_vres=condition_mta_vres[key]
    base_score1,base_score2,base_score3,base_dict=qMTA.get_score_qmta_genes_kpc_met(target_model,vres_dict=vres_dict,vref_dict=vref_dict,gene_weight_dict=gene_weight_dict,up_genes=up_genes,down_genes=down_genes,max_reactionxgene=max_reactionxgene_score,normalize_by_ref_flux=normalize_by_ref_flux_score, min_flux=min_flux,min_flux_normalization=min_flux,signficant_met_dict=signficant_met_dict_pellet,signficant_kpc_dict=signficant_met_dict_kpc)
    #rows=[["","","base_score",base_score1,base_score2,base_score3]]
    rows=[["Drug(s)/Gene KO","Targets","Reactions","qMTA score","MOMA score","qMTA difference","MOMA difference","Aggregate Score","","Biomass flux"],["","","base_score:",base_score2,"","","","Source biomass:",vref_dict[biomass_reaction],condition_mta_vres[key][biomass_reaction]]]
    #ko_dict_drugs=ko_dict_qmta[key]
    #results_dict_moma_drug=ko_dict_moma[key]
    #print base_score2
    for gene_id in ko_dict_drugs:
        #score_mta,score,score_denominator =get_score_qmta(target_model,vres_dict=ko_dict[gene_id]["vres"],vref_dict=vref_dict,gene_weight_dict=gene_weight_dict,up_genes=up_genes,down_genes=down_genes,max_reactionxgene=10,normalize_by_ref_flux=True)
        score1, score2, score3,score_dict_ko=qMTA.get_score_qmta_genes_kpc_met(target_model,vres_dict=ko_dict_drugs[gene_id]["vres"],vref_dict=vref_dict,gene_weight_dict=gene_weight_dict,up_genes=up_genes,down_genes=down_genes,max_reactionxgene=max_reactionxgene_score,normalize_by_ref_flux=normalize_by_ref_flux_score, min_flux=min_flux,min_flux_normalization=min_flux,signficant_met_dict=signficant_met_dict_pellet,signficant_kpc_dict=signficant_met_dict_kpc)
        score_dict[gene_id]=score_dict_ko   
        #print gene_id, score1
        #row=[clean_str(str(targets_drug_dict[gene_id])),clean_str(gene_id),clean_str(str(ko_dict_drugs[gene_id]["reactions_to_ko"])),score1, score2, score3]
        row=[list_to_str(targets_drug_dict[gene_id]),list_to_str(gene_id),list_to_str(ko_dict_drugs[gene_id]["reactions_to_ko"]),score2]
        moma_score1, moma_score2, moma_score3,score_dict_ko=qMTA.get_score_qmta_genes_kpc_met(target_model,vres_dict=results_dict_moma_drug[gene_id],vref_dict=vref_dict,gene_weight_dict=gene_weight_dict,up_genes=up_genes,down_genes=down_genes,max_reactionxgene=max_reactionxgene_score,normalize_by_ref_flux=normalize_by_ref_flux_score, min_flux=min_flux,min_flux_normalization=min_flux,signficant_met_dict=signficant_met_dict_pellet,signficant_kpc_dict=signficant_met_dict_kpc)
        row+=[moma_score2]
        #row+=["",moma_score1, moma_score2, moma_score3]
        dif1=(base_score2-score2)
        dif2=(base_score2-moma_score2)
        global_score=abs(dif1)*abs(dif2)*min(np.sign(dif1),np.sign(dif2))
        row+=[dif1,dif2,global_score,"",results_dict_moma_drug[gene_id][biomass_reaction]]
        rows.append(row)
    sheet_dict[key]=rows
    score_dict_dict_dict[key]=score_dict


write_spreadsheet(output_prefix+key_name+"_drugs_genes_output.xlsx",sheet_dict)

with open(output_prefix+key_name+"_score_dict_dict_dict.json","w") as f:
     json.dump(score_dict_dict_dict,f)



